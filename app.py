import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime
import plotly.express as px
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Connexion √† la base de donn√©es
conn = sqlite3.connect("gamma_camera.db", check_same_thread=False)
cursor = conn.cursor()

# Cr√©ation des tables
cursor.execute('''CREATE TABLE IF NOT EXISTS controle_qualite (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    date TEXT,
    type TEXT,
    intervenant TEXT,
    resultat TEXT
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS utilisateurs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nom TEXT,
    role TEXT
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS pannes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    date TEXT,
    description TEXT,
    intervenant TEXT,
    action TEXT
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS documents (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nom TEXT,
    type TEXT,
    fichier BLOB
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS pieces_detachees (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nom TEXT,
    ref TEXT,
    date_commande TEXT,
    fournisseur TEXT,
    date_reception TEXT
)''')

conn.commit()

# Configuration Streamlit
st.set_page_config(layout="wide")
st.title("üì° Interface de gestion - Gamma Cam√©ra")

# Fonction d'envoi d'e-mail

def envoyer_email(destinataire, sujet, message):
    sender_email = "maryamabia14@gmail.com"
    app_password = "wyva itgr vrmu keet"
    msg = MIMEMultipart()
    msg["From"] = sender_email
    msg["To"] = destinataire
    msg["Subject"] = sujet
    msg.attach(MIMEText(message, "plain"))
    try:
        server = smtplib.SMTP_SSL("smtp.gmail.com", 465)
        server.login(sender_email, app_password)
        server.sendmail(sender_email, destinataire, msg.as_string())
        server.quit()
        return True
    except Exception as e:
        return False

# Menu principal
menu = st.sidebar.radio("Navigation", [
    "Accueil",
    "Utilisateurs",
    "Contr√¥les de qualit√©",
    "Descriptions des tests",
    "Pannes",
    "Pi√®ces d√©tach√©es",
    "Documents",
    "Analyse",
    "Rappels automatiques"
])

if menu == "Accueil":
    st.markdown("""
    ## Bienvenue üëã
    Interface compl√®te de gestion de la gamma cam√©ra : utilisateurs, contr√¥les qualit√©, pannes, documents, pi√®ces d√©tach√©es, rappels automatiques, et plus encore.
    Utilisez le menu √† gauche pour naviguer entre les sections.
    """)

elif menu == "Utilisateurs":
    st.header("üë• Gestion des intervenants")
    with st.form("form_user"):
        nom = st.text_input("Nom complet")
        role = st.selectbox("R√¥le", ["Technicien", "Ing√©nieur", "M√©decin", "Physicien M√©dical", "Autre"])
        submit = st.form_submit_button("Ajouter")
        if submit:
            if nom.strip() != "":
                cursor.execute("INSERT INTO utilisateurs (nom, role) VALUES (?, ?)", (nom, role))
                conn.commit()
                st.success("‚úÖ Intervenant ajout√©")
            else:
                st.warning("Veuillez entrer un nom.")

    st.subheader("Liste des intervenants")
    df = pd.read_sql("SELECT * FROM utilisateurs ORDER BY id DESC", conn)
    st.dataframe(df)

elif menu == "Contr√¥les de qualit√©":
    st.header("üìÖ Enregistrement des contr√¥les de qualit√©")
    intervenants = pd.read_sql("SELECT nom FROM utilisateurs", conn)["nom"].tolist()
    types_tests = [
        "Lin√©arit√©",
        "Uniformit√© intrins√®que",
        "R√©solution spatiale intrins√®que",
        "Uniformit√© syst√®me avec collimateur",
        "Sensibilit√©",
        "R√©solution √©nerg√©tique",
        "Centre de rotation"
    ]
    if intervenants:
        with st.form("form_cq"):
            date = st.date_input("Date", value=datetime.now())
            type_test = st.selectbox("Type de test", types_tests)
            intervenant = st.selectbox("Intervenant", intervenants)
            resultat = st.text_area("Observation / R√©sultat")
            submit = st.form_submit_button("Enregistrer")
            if submit:
                cursor.execute("""
                    INSERT INTO controle_qualite (date, type, intervenant, resultat)
                    VALUES (?, ?, ?, ?)
                """, (date.strftime('%Y-%m-%d'), type_test, intervenant, resultat))
                conn.commit()
                st.success("‚úÖ Contr√¥le enregistr√©")
    else:
        st.warning("‚ö†Ô∏è Veuillez ajouter d'abord des intervenants.")

    st.subheader("Historique des contr√¥les")
    df_cq = pd.read_sql("SELECT * FROM controle_qualite ORDER BY date DESC", conn)
    st.dataframe(df_cq)

elif menu == "Descriptions des tests":
    st.header("üìñ Descriptions des tests de la gamma cam√©ra")
    tests_info = {
        "Lin√©arit√©": {
            "fr√©quence": "Hebdomadaire et Semestrielle",
            "description": "V√©rifie que la gamma cam√©ra restitue correctement les formes sans distorsion."
        },
        "Uniformit√© intrins√®que": {
            "fr√©quence": "Hebdomadaire (10√ó10‚Å∂ coups) et Mensuelle (200√ó10‚Å∂ coups)",
            "description": "Contr√¥le la capacit√© de la gamma cam√©ra √† produire une image homog√®ne √† partir d'une source uniforme."
        },
        "R√©solution spatiale intrins√®que": {
            "fr√©quence": "Mensuelle",
            "description": "√âvalue la capacit√© de la gamma cam√©ra √† distinguer les d√©tails fins (sans collimateur)."
        },
        "Uniformit√© syst√®me avec collimateur": {
            "fr√©quence": "Hebdomadaire (visuel) et Semestrielle (quantitatif)",
            "description": "V√©rifie l‚Äôhomog√©n√©it√© de l‚Äôimage produite avec collimateur."
        },
        "Sensibilit√©": {
            "fr√©quence": "Annuelle",
            "description": "√âvalue la r√©ponse du syst√®me √† un radionucl√©ide d‚Äôactivit√© connue."
        },
        "R√©solution √©nerg√©tique": {
            "fr√©quence": "Annuelle",
            "description": "Mesure la capacit√© du syst√®me √† distinguer les photons d‚Äô√©nergie proche (typiquement 10 % √† 140 keV)."
        },
        "Centre de rotation": {
            "fr√©quence": "Tomographique (r√©ception + p√©riodique)",
            "description": "√âvalue l‚Äôalignement correct du syst√®me lors de l‚Äôacquisition tomographique."
        }
    }
    for test, infos in tests_info.items():
        with st.container():
            st.subheader(f"üî¨ {test}")
            st.markdown(f"**Fr√©quence :** {infos['fr√©quence']}")
            st.markdown(f"**Description :** {infos['description']}")
            st.markdown("---")

elif menu == "Pannes":
    st.header("üõ†Ô∏è Suivi des pannes")
    intervenants = pd.read_sql("SELECT nom FROM utilisateurs", conn)["nom"].tolist()
    if intervenants:
        with st.form("form_panne"):
            date = st.date_input("Date", value=datetime.now())
            description = st.text_area("Description de la panne")
            intervenant = st.selectbox("Intervenant", intervenants)
            action = st.text_area("Action effectu√©e")
            submit = st.form_submit_button("Enregistrer")
            if submit:
                cursor.execute("INSERT INTO pannes (date, description, intervenant, action) VALUES (?, ?, ?, ?)",
                               (date.strftime('%Y-%m-%d'), description, intervenant, action))
                conn.commit()
                st.success("‚úÖ Panne enregistr√©e")
    else:
        st.warning("Ajoutez d'abord des intervenants.")

    st.subheader("Historique des pannes")
    df = pd.read_sql("SELECT * FROM pannes ORDER BY date DESC", conn)
    st.dataframe(df)

elif menu == "Pi√®ces d√©tach√©es":
    st.header("üîß Gestion des pi√®ces d√©tach√©es")
    with st.form("form_piece"):
        nom = st.text_input("Nom de la pi√®ce")
        ref = st.text_input("R√©f√©rence")
        date_commande = st.date_input("Date de commande")
        fournisseur = st.text_input("Fournisseur")
        date_reception = st.date_input("Date de r√©ception")
        submit = st.form_submit_button("Enregistrer")
        if submit:
            cursor.execute("INSERT INTO pieces_detachees (nom, ref, date_commande, fournisseur, date_reception) VALUES (?, ?, ?, ?, ?)",
                           (nom, ref, date_commande.strftime('%Y-%m-%d'), fournisseur, date_reception.strftime('%Y-%m-%d')))
            conn.commit()
            st.success("‚úÖ Pi√®ce enregistr√©e")

    st.subheader("Historique des pi√®ces")
    df = pd.read_sql("SELECT * FROM pieces_detachees ORDER BY date_commande DESC", conn)
    st.dataframe(df)

elif menu == "Documents":
    st.header("üìÇ Gestion des documents")
    with st.form("form_doc"):
        nom = st.text_input("Nom du document")
        type_doc = st.selectbox("Type", ["Protocole", "Contrat", "Notice", "Rapport"])
        fichier = st.file_uploader("Fichier", type=["pdf", "docx", "png", "jpg"])
        submit = st.form_submit_button("Enregistrer")
        if submit and fichier:
            blob = fichier.read()
            cursor.execute("INSERT INTO documents (nom, type, fichier) VALUES (?, ?, ?)", (nom, type_doc, blob))
            conn.commit()
            st.success("‚úÖ Document enregistr√©")

    st.subheader("Liste des documents")
    df = pd.read_sql("SELECT id, nom, type FROM documents ORDER BY id DESC", conn)
    st.dataframe(df)

elif menu == "Analyse":
    st.header("üìä Analyse des donn√©es")
    df_cq = pd.read_sql("SELECT * FROM controle_qualite", conn)
    if not df_cq.empty:
        fig = px.histogram(df_cq, x="type", color="type", title="Nombre de contr√¥les par type")
        st.plotly_chart(fig)

    df_pannes = pd.read_sql("SELECT * FROM pannes", conn)
    if not df_pannes.empty:
        df_pannes['date'] = pd.to_datetime(df_pannes['date'])
        freq = df_pannes.groupby(df_pannes['date'].dt.to_period('M')).size().reset_index(name='Nombre')
        freq['date'] = freq['date'].astype(str)
        fig = px.bar(freq, x='date', y='Nombre', title="Fr√©quence des pannes par mois")
        st.plotly_chart(fig)

elif menu == "Rappels automatiques":
    st.header("üîî Rappels des contr√¥les qualit√©")
    df = pd.read_sql("SELECT * FROM controle_qualite", conn)
    if df.empty:
        st.warning("Aucun contr√¥le enregistr√©.")
    else:
        df['date'] = pd.to_datetime(df['date']).dt.date
        today = datetime.now().date()

        freqs = {
            "Lin√©arit√©": 7,
            "Uniformit√© intrins√®que": 7,
            "R√©solution spatiale intrins√®que": 30,
            "Uniformit√© syst√®me avec collimateur": 7,
            "Sensibilit√©": 365,
            "R√©solution √©nerg√©tique": 365,
            "Centre de rotation": 180
        }

        for test, jours in freqs.items():
            filt = df[df['type'] == test]
            if not filt.empty:
                last = filt['date'].max()
                delta = (today - last).days
                if delta > jours:
                    st.warning(f"‚è∞ {test} en retard ({delta} jours)")
                else:
                    st.success(f"‚úÖ {test} √† jour ({delta} jours)")
            else:
                st.error(f"‚ùå Aucun {test} enregistr√©")

        if st.button("üìß Envoyer rappel par e-mail"):
            msg = "Ceci est un rappel automatique pour effectuer les contr√¥les qualit√© de la gamma cam√©ra."
            sent = envoyer_email("maryamabia01@gmail.com", "Rappel des contr√¥les qualit√©", msg)
            if sent:
                st.success("üì® E-mail envoy√© avec succ√®s !")
            else:
                st.error("Erreur lors de l'envoi de l'e-mail.")
